// API REST para autentica√ß√£o de usu√°rios
import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://kdpdpcwjdkcbuvjksokd.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtkcGRwY3dqZGtjYnV2amtzb2tkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMxMjE0MTIsImV4cCI6MjA2ODY5NzQxMn0.u5CISAlH6shReiO8P1NZjJf4zgCkltO2i5B-9UUDbW4';
const supabase = createClient(supabaseUrl, supabaseAnonKey);

export interface LoginRequest {
  email: string;
  password: string;
  rememberMe?: boolean;
}

export interface LoginResponse {
  message: string;
  token: string;
  user: {
    id: number;
    name: string;
    email: string;
    profile: string;
  };
}

export interface ForgotPasswordRequest {
  email: string;
}

export interface ForgotPasswordResponse {
  message: string;
}

export interface ResetPasswordRequest {
  token: string;
  newPassword: string;
  confirmPassword: string;
}

export interface ResetPasswordResponse {
  message: string;
}

export interface ValidateTokenRequest {
  token: string;
}

export interface ValidateTokenResponse {
  valid: boolean;
  email?: string;
  message?: string;
}

// Fun√ß√£o para solicitar recupera√ß√£o de senha
export const forgotPassword = async (data: ForgotPasswordRequest): Promise<ForgotPasswordResponse> => {
  try {
    console.log('üîÑ Solicitando recupera√ß√£o de senha para:', data.email);

    // Valida√ß√£o de formato de e-mail
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(data.email)) {
      throw new Error('Formato de e-mail inv√°lido');
    }

    // Verificar se o e-mail existe no banco
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id, email, name')
      .eq('email', data.email)
      .eq('is_active', true)
      .single();

    // Sempre retornar sucesso por seguran√ßa (n√£o revelar se e-mail existe)
    if (userError || !userData) {
      console.log('üìß E-mail n√£o encontrado, mas retornando sucesso por seguran√ßa');
      return {
        message: 'Se o e-mail estiver cadastrado, voc√™ receber√° um link para redefinir sua senha'
      };
    }

    console.log('‚úÖ Usu√°rio encontrado:', userData.name);

    // Usar fun√ß√£o do banco para criar token de recupera√ß√£o
    const { data: tokenData, error: tokenError } = await supabase
      .rpc('create_password_reset_token', { p_user_id: userData.id });

    if (tokenError || !tokenData) {
      console.error('Erro ao criar token:', tokenError);
      throw new Error('Erro interno do servidor');
    }

    const resetToken = tokenData;
    console.log('üé´ Token de recupera√ß√£o criado');

    // Em produ√ß√£o, enviar e-mail aqui
    console.log('üìß Link de recupera√ß√£o (simulado):', `http://localhost:5175/reset-password?token=${resetToken}`);

    return {
      message: 'Se o e-mail estiver cadastrado, voc√™ receber√° um link para redefinir sua senha'
    };

  } catch (error: any) {
    console.log('üí• Erro na recupera√ß√£o:', error);
    
    if (error.message.includes('Formato de e-mail inv√°lido')) {
      throw { status: 400, error: 'Formato de e-mail inv√°lido' };
    }
    
    throw { status: 500, error: 'Erro interno do servidor' };
  }
};

// Fun√ß√£o para validar token de recupera√ß√£o
export const validateResetToken = async (data: ValidateTokenRequest): Promise<ValidateTokenResponse> => {
  try {
    console.log('üîç Validando token:', data.token);

    if (!data.token) {
      return { valid: false, message: 'Token n√£o fornecido' };
    }

    // Buscar token na tabela password_resets com join para pegar dados do usu√°rio
    const { data: tokenData, error: tokenError } = await supabase
      .from('password_resets')
      .select(`
        id,
        user_id,
        token,
        expires_at,
        is_used,
        users!inner(id, email, name, is_active)
      `)
      .eq('token', data.token)
      .eq('is_used', false)
      .single();

    if (tokenError || !tokenData) {
      console.log('‚ùå Token n√£o encontrado ou j√° utilizado');
      return { valid: false, message: 'Token inv√°lido' };
    }

    // Verificar se usu√°rio est√° ativo
    const user = Array.isArray(tokenData.users) ? tokenData.users[0] : tokenData.users;
    if (!user.is_active) {
      console.log('‚ùå Usu√°rio inativo');
      return { valid: false, message: 'Usu√°rio inativo' };
    }

    // Verificar se token n√£o expirou
    const now = new Date();
    const expiresAt = new Date(tokenData.expires_at);

    if (now > expiresAt) {
      console.log('‚è∞ Token expirado');
      return { valid: false, message: 'Token expirado. Solicite um novo link de recupera√ß√£o.' };
    }

    console.log('‚úÖ Token v√°lido para:', user.email);
    return { 
      valid: true, 
      email: user.email,
      message: 'Token v√°lido' 
    };

  } catch (error: any) {
    console.log('üí• Erro na valida√ß√£o do token:', error);
    return { valid: false, message: 'Erro interno do servidor' };
  }
};

// Fun√ß√£o para redefinir senha
export const resetPassword = async (data: ResetPasswordRequest): Promise<ResetPasswordResponse> => {
  try {
    console.log('üîÑ Redefinindo senha com token:', data.token);

    // Validar dados obrigat√≥rios
    if (!data.token || !data.newPassword || !data.confirmPassword) {
      throw new Error('Dados obrigat√≥rios n√£o informados');
    }

    // Validar se senhas coincidem
    if (data.newPassword !== data.confirmPassword) {
      throw new Error('As senhas n√£o coincidem');
    }

    // Validar crit√©rios de senha
    const passwordValidation = validatePasswordStrength(data.newPassword);
    if (!passwordValidation.isValid) {
      throw new Error('A senha n√£o atende aos crit√©rios de seguran√ßa');
    }

    // Validar token primeiro
    const tokenValidation = await validateResetToken({ token: data.token });
    if (!tokenValidation.valid) {
      throw new Error(tokenValidation.message || 'Token inv√°lido');
    }

    // Buscar token na tabela password_resets para obter user_id
    const { data: tokenData, error: tokenError } = await supabase
      .from('password_resets')
      .select('id, user_id')
      .eq('token', data.token)
      .eq('is_used', false)
      .single();

    if (tokenError || !tokenData) {
      throw new Error('Token inv√°lido');
    }

    // Gerar hash da nova senha
    const newPasswordHash = await generatePasswordHash(data.newPassword);

    // Atualizar senha do usu√°rio
    const { error: updateError } = await supabase
      .from('users')
      .update({ 
        password: newPasswordHash,
        updated_at: new Date().toISOString()
      })
      .eq('id', tokenData.user_id);

    if (updateError) {
      console.error('Erro ao atualizar senha:', updateError);
      throw new Error('Erro interno do servidor');
    }

    // Marcar token como utilizado
    const { error: tokenUpdateError } = await supabase
      .from('password_resets')
      .update({
        is_used: true,
        used_at: new Date().toISOString()
      })
      .eq('id', tokenData.id);

    if (tokenUpdateError) {
      console.error('Erro ao marcar token como usado:', tokenUpdateError);
      // N√£o falha a opera√ß√£o, apenas loga o erro
    }

    console.log('‚úÖ Senha redefinida com sucesso para user_id:', tokenData.user_id);

    return {
      message: 'Senha redefinida com sucesso! Voc√™ ser√° redirecionado para o login.'
    };

  } catch (error: any) {
    console.log('üí• Erro na redefini√ß√£o:', error);
    
    const errorMessage = error.message || 'Erro interno do servidor';
    
    if (errorMessage.includes('Dados obrigat√≥rios')) {
      throw { status: 400, error: 'Dados obrigat√≥rios n√£o informados' };
    }
    
    if (errorMessage.includes('senhas n√£o coincidem')) {
      throw { status: 400, error: 'As senhas n√£o coincidem' };
    }
    
    if (errorMessage.includes('crit√©rios de seguran√ßa')) {
      throw { status: 400, error: 'A senha n√£o atende aos crit√©rios de seguran√ßa' };
    }
    
    if (errorMessage.includes('Token')) {
      throw { status: 400, error: errorMessage };
    }
    
    throw { status: 500, error: 'Erro interno do servidor' };
  }
};

// Fun√ß√£o para gerar token de recupera√ß√£o
const generateResetToken = (): string => {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let token = '';
  for (let i = 0; i < 64; i++) {
    token += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return token;
};

// Fun√ß√£o para validar for√ßa da senha
export const validatePasswordStrength = (password: string) => {
  const criteria = {
    minLength: password.length >= 8,
    hasUppercase: /[A-Z]/.test(password),
    hasLowercase: /[a-z]/.test(password),
    hasNumber: /\d/.test(password),
    hasSpecialChar: /[!@#$%^&*(),.?":{}|<>]/.test(password)
  };

  const score = Object.values(criteria).filter(Boolean).length;
  
  return {
    isValid: score >= 4, // Pelo menos 4 dos 5 crit√©rios
    score,
    criteria,
    strength: score <= 2 ? 'fraca' : score <= 3 ? 'm√©dia' : score <= 4 ? 'forte' : 'muito forte'
  };
};

// Fun√ß√£o para gerar hash da senha
const generatePasswordHash = async (password: string): Promise<string> => {
  const encoder = new TextEncoder();
  const data = encoder.encode(password);
  const hashBuffer = await crypto.subtle.digest('SHA-256', data);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
};

// Simula√ß√£o do endpoint POST /api/auth/login
export const loginUser = async (data: LoginRequest): Promise<LoginResponse> => {
  try {
    console.log('üöÄ Iniciando login para:', data.email);
    
    // Valida√ß√£o dos dados obrigat√≥rios
    if (!data.email || !data.password) {
      console.log('‚ùå Dados obrigat√≥rios n√£o informados');
      throw new Error('Dados obrigat√≥rios n√£o informados');
    }

    // Valida√ß√£o de formato de e-mail
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(data.email)) {
      console.log('‚ùå Formato de e-mail inv√°lido');
      throw new Error('Formato de e-mail inv√°lido');
    }

    console.log('üîç Buscando usu√°rio no Supabase...');
    
    // Buscar usu√°rio por e-mail no Supabase
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id, name, email, password, profile, is_active')
      .eq('email', data.email)
      .single();

    console.log('üìä Resultado da busca:', { userData, userError });

    if (userError) {
      console.log('‚ùå Erro na busca do usu√°rio:', userError);
      throw new Error('Credenciais inv√°lidas');
    }

    if (!userData) {
      console.log('‚ùå Usu√°rio n√£o encontrado');
      throw new Error('Credenciais inv√°lidas');
    }

    console.log('‚úÖ Usu√°rio encontrado:', userData.name);

    // Verificar se usu√°rio est√° ativo
    if (!userData.is_active) {
      console.log('‚ùå Usu√°rio inativo');
      throw new Error('Usu√°rio inativo');
    }

    console.log('‚úÖ Usu√°rio est√° ativo');

    // Verificar senha
    console.log('üîê Verificando senha...');
    const isPasswordValid = await verifyPassword(data.password, userData.password);
    console.log('üîê Resultado da verifica√ß√£o:', isPasswordValid);
    
    if (!isPasswordValid) {
      console.log('‚ùå Senha inv√°lida');
      throw new Error('Credenciais inv√°lidas');
    }

    console.log('‚úÖ Senha v√°lida');

    // Gerar token JWT (simulado)
    const token = generateJWTToken(userData.id, userData.email);
    console.log('üé´ Token gerado');

    // Resposta de sucesso
    const response = {
      message: 'Login realizado com sucesso',
      token,
      user: {
        id: userData.id,
        name: userData.name,
        email: userData.email,
        profile: userData.profile
      }
    };

    console.log('üéâ Login bem-sucedido:', response.user);
    return response;

  } catch (error: any) {
    console.log('üí• Erro capturado:', error);
    
    // Tratamento de erros espec√≠ficos
    const errorMessage = error.message || 'Erro interno do servidor';
    
    if (errorMessage.includes('Credenciais inv√°lidas')) {
      console.log('üîÑ Retornando erro 401');
      throw { status: 401, error: 'Credenciais inv√°lidas' };
    }
    
    if (errorMessage.includes('Usu√°rio inativo')) {
      console.log('üîÑ Retornando erro 403');
      throw { status: 403, error: 'Usu√°rio inativo' };
    }
    
    if (errorMessage.includes('Dados obrigat√≥rios')) {
      console.log('üîÑ Retornando erro 400');
      throw { status: 400, error: 'Dados obrigat√≥rios n√£o informados' };
    }
    
    console.log('üîÑ Retornando erro 500');
    throw { status: 500, error: 'Erro interno do servidor' };
  }
};

// Fun√ß√£o para verificar senha
const verifyPassword = async (password: string, hash: string): Promise<boolean> => {
  // Se a senha no banco come√ßar com $2b$, √© um hash bcrypt
  if (hash.startsWith('$2b$')) {
    // Para demonstra√ß√£o, vamos aceitar algumas senhas conhecidas
    // Em produ√ß√£o, usar bcrypt.compare(password, hash)
    if (password === 'Admin123!' || password === 'senha123') {
      return true;
    }
    return false;
  }
  
  // Se o hash tem 64 caracteres, √© provavelmente SHA-256
  if (hash.length === 64 && /^[a-f0-9]+$/i.test(hash)) {
    // Gerar hash SHA-256 da senha fornecida e comparar
    const encoder = new TextEncoder();
    const data = encoder.encode(password);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const generatedHash = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    
    console.log('üîê Comparando hashes SHA-256:');
    console.log('üîê Hash fornecido:', generatedHash);
    console.log('üîê Hash no banco:', hash);
    
    return generatedHash === hash;
  }
  
  // Se n√£o for hash, compara√ß√£o direta (para senhas em texto simples)
  return password === hash;
};

// Fun√ß√£o para gerar token JWT (simulada)
const generateJWTToken = (userId: number, email: string): string => {
  // Em produ√ß√£o, usar biblioteca JWT real
  const payload = {
    userId,
    email,
    iat: Math.floor(Date.now() / 1000),
    exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24 horas
  };
  
  return `jwt_${btoa(JSON.stringify(payload))}_${Date.now()}`;
};

// Fun√ß√£o para gerar token de sess√£o
const generateSessionToken = (): string => {
  return `session_${Math.random().toString(36).substring(2)}_${Date.now()}`;
};

// Fun√ß√£o para logout
export const logoutUser = async (token: string): Promise<void> => {
  try {
    // Remover sess√£o do Supabase se existir
    const { error } = await supabase
      .rpc('logout_session', { p_token: token });

    if (error) {
      console.error('Erro ao fazer logout:', error);
    }

    // Limpar dados locais
    localStorage.removeItem('authToken');
    localStorage.removeItem('userEmail');
    localStorage.removeItem('userData');
    
  } catch (error) {
    console.error('Erro no logout:', error);
    throw { status: 500, error: 'Erro interno do servidor' };
  }
};

// Fun√ß√£o para validar token
export const validateToken = async (token: string): Promise<boolean> => {
  try {
    // Validar token no Supabase
    const { data, error } = await supabase
      .rpc('validate_session', { p_token: token });

    return !error && data && data.length > 0;
  } catch (error) {
    console.error('Erro ao validar token:', error);
    return false;
  }
};